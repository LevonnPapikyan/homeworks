#homeworks
def func(num,lis):
    i=1
    while i<num+1:
        last_item = lis[-1]
        lis.remove(lis[-1])
        lis.insert(0,last_item)
        i+=1
    return lis

def intersetion_of_lists(l1,l2):
    l1_without_duplicates = []
    intersection_list = []
    [l1_without_duplicates.append(x) for x in l1 if x not in l1_without_duplicates]
    for i in l1_without_duplicates:
        if i in l2:
            intersection_list.append(i)
    return intersection_list

def func_3(ls):
    s=0
    new = []
    for i in range(0, len(ls)-1):
        s+=ls[i]
        new.append(s)
    return  new

def func_3(ls):

    new_ls = []
    for i in range(1,len(ls)+1):
        sum_ = 0
        for z in [ls[j] for j in range(i)]:
            sum_+=z
        new_ls.append(sum_)
    return new_ls

def areBracketsBalanced(expr):

    stack = []
    for char in expr:
        if char in ["(", "{", "["]:
 
            # Push the element in the stack
            stack.append(char)
        else:
 
            # IF current character is not opening
            # bracket, then it must be closing.
            # So stack cannot be empty at this point.
            if not stack:
                return False
            current_char = stack.pop()
            if current_char == '(':
                if char != ")":
                    return False
            if current_char == '{':
                if char != "}":
                    return False
            if current_char == '[':
                if char != "]":
                    return False

    # Check Empty Stack
    if stack:
        return False
    return True

